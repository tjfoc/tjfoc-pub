// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

/*
Package raft is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	LogEntry
	AppendEntriesRequest
	AppendEntriesResponse
	RequestVoteRequest
	RequestVoteResponse
	SnapshootRequest
	SnapshootResponse
	LogReq
	LogRes
*/
package raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogEntry struct {
	Index       uint64 `protobuf:"varint,1,opt,name=Index" json:"Index,omitempty"`
	Term        uint64 `protobuf:"varint,2,opt,name=Term" json:"Term,omitempty"`
	CommandName string `protobuf:"bytes,3,opt,name=CommandName" json:"CommandName,omitempty"`
	Command     []byte `protobuf:"bytes,4,opt,name=Command,proto3" json:"Command,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetCommandName() string {
	if m != nil {
		return m.CommandName
	}
	return ""
}

func (m *LogEntry) GetCommand() []byte {
	if m != nil {
		return m.Command
	}
	return nil
}

// 附加日志，参数
type AppendEntriesRequest struct {
	// 领导人的任期号
	Term uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	// 领导人的 Id，以便于跟随者重定向请求
	LeaderId string `protobuf:"bytes,2,opt,name=LeaderId" json:"LeaderId,omitempty"`
	// 新的日志条目紧随之前的索引值
	PrevLogIndex uint64 `protobuf:"varint,3,opt,name=PrevLogIndex" json:"PrevLogIndex,omitempty"`
	// prevLogIndex 条目的任期号
	PrevLogTerm uint64 `protobuf:"varint,4,opt,name=PrevLogTerm" json:"PrevLogTerm,omitempty"`
	// 准备存储的日志条目（表示心跳时为空；一次性发送多个是为了提高效率）
	Entries []*LogEntry `protobuf:"bytes,5,rep,name=Entries" json:"Entries,omitempty"`
	// 领导人已经提交的日志的索引值
	LeaderCommit uint64 `protobuf:"varint,6,opt,name=LeaderCommit" json:"LeaderCommit,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppendEntriesRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *AppendEntriesRequest) GetPrevLogIndex() uint64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntriesRequest) GetLeaderCommit() uint64 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

// 附加日志，返回结果
type AppendEntriesResponse struct {
	// 当前的任期号，用于领导人去更新自己
	Term uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	// 跟随者包含了匹配上 prevLogIndex 和 prevLogTerm 的日志时为真
	Success bool `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
	// Last Log is a hint to help accelerate rebuilding slow nodes
	LastLog uint64 `protobuf:"varint,3,opt,name=LastLog" json:"LastLog,omitempty"`
	// There are scenarios where this request didn't succeed
	// but there's no need to wait/back-off the next attempt.
	NoRetryBackoff bool `protobuf:"varint,4,opt,name=NoRetryBackoff" json:"NoRetryBackoff,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AppendEntriesResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AppendEntriesResponse) GetLastLog() uint64 {
	if m != nil {
		return m.LastLog
	}
	return 0
}

func (m *AppendEntriesResponse) GetNoRetryBackoff() bool {
	if m != nil {
		return m.NoRetryBackoff
	}
	return false
}

// 请求投票，参数
type RequestVoteRequest struct {
	// 候选人的任期号
	Term uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	// 请求选票的候选人的 Id
	CandidateId string `protobuf:"bytes,2,opt,name=CandidateId" json:"CandidateId,omitempty"`
	// 候选人的最后日志条目的索引值
	LastLogIndex uint64 `protobuf:"varint,3,opt,name=LastLogIndex" json:"LastLogIndex,omitempty"`
	// 候选人最后日志条目的任期号
	LastLogTerm uint64 `protobuf:"varint,4,opt,name=LastLogTerm" json:"LastLogTerm,omitempty"`
	// 区块高度
	BlockHeight uint64 `protobuf:"varint,5,opt,name=BlockHeight" json:"BlockHeight,omitempty"`
	CommitIndex uint64 `protobuf:"varint,6,opt,name=CommitIndex" json:"CommitIndex,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestVoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRequest) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

func (m *RequestVoteRequest) GetLastLogIndex() uint64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogTerm() uint64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

func (m *RequestVoteRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *RequestVoteRequest) GetCommitIndex() uint64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

// 请求投票，返回
type RequestVoteResponse struct {
	// 当前任期号，以便于候选人去更新自己的任期号
	Term uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	// 候选人赢得了此张选票时为真
	VoteGranted bool `protobuf:"varint,2,opt,name=VoteGranted" json:"VoteGranted,omitempty"`
	// 区块高度
	BlockHeight uint64 `protobuf:"varint,3,opt,name=BlockHeight" json:"BlockHeight,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RequestVoteResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResponse) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

func (m *RequestVoteResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// 快照
type SnapshootRequest struct {
	// 领导人的任期号
	Term uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	// 领导人的 Id，以便于跟随者重定向请求
	LeaderId string `protobuf:"bytes,2,opt,name=LeaderId" json:"LeaderId,omitempty"`
	// 快照中包含的最后日志条目的索引值
	LastIncludedIndex uint64 `protobuf:"varint,3,opt,name=LastIncludedIndex" json:"LastIncludedIndex,omitempty"`
	// 快照中包含的最后日志条目的任期号
	LastIncludedTerm uint64 `protobuf:"varint,4,opt,name=LastIncludedTerm" json:"LastIncludedTerm,omitempty"`
	// 区块高度
	BlockHeight uint64 `protobuf:"varint,5,opt,name=BlockHeight" json:"BlockHeight,omitempty"`
	// 节点信息
	Peers []byte `protobuf:"bytes,6,opt,name=Peers,proto3" json:"Peers,omitempty"`
}

func (m *SnapshootRequest) Reset()                    { *m = SnapshootRequest{} }
func (m *SnapshootRequest) String() string            { return proto.CompactTextString(m) }
func (*SnapshootRequest) ProtoMessage()               {}
func (*SnapshootRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SnapshootRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *SnapshootRequest) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *SnapshootRequest) GetLastIncludedIndex() uint64 {
	if m != nil {
		return m.LastIncludedIndex
	}
	return 0
}

func (m *SnapshootRequest) GetLastIncludedTerm() uint64 {
	if m != nil {
		return m.LastIncludedTerm
	}
	return 0
}

func (m *SnapshootRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *SnapshootRequest) GetPeers() []byte {
	if m != nil {
		return m.Peers
	}
	return nil
}

// 快照
type SnapshootResponse struct {
	// 当前任期号，便于领导人更新自己
	Term uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
}

func (m *SnapshootResponse) Reset()                    { *m = SnapshootResponse{} }
func (m *SnapshootResponse) String() string            { return proto.CompactTextString(m) }
func (*SnapshootResponse) ProtoMessage()               {}
func (*SnapshootResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SnapshootResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type LogReq struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *LogReq) Reset()                    { *m = LogReq{} }
func (m *LogReq) String() string            { return proto.CompactTextString(m) }
func (*LogReq) ProtoMessage()               {}
func (*LogReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LogReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type LogRes struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *LogRes) Reset()                    { *m = LogRes{} }
func (m *LogRes) String() string            { return proto.CompactTextString(m) }
func (*LogRes) ProtoMessage()               {}
func (*LogRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LogRes) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*LogEntry)(nil), "raft.LogEntry")
	proto.RegisterType((*AppendEntriesRequest)(nil), "raft.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "raft.AppendEntriesResponse")
	proto.RegisterType((*RequestVoteRequest)(nil), "raft.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "raft.RequestVoteResponse")
	proto.RegisterType((*SnapshootRequest)(nil), "raft.SnapshootRequest")
	proto.RegisterType((*SnapshootResponse)(nil), "raft.SnapshootResponse")
	proto.RegisterType((*LogReq)(nil), "raft.LogReq")
	proto.RegisterType((*LogRes)(nil), "raft.LogRes")
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x15, 0x9a, 0xfe, 0xd9, 0x69, 0x35, 0x6d, 0xa6, 0x48, 0x11, 0xe2, 0x22, 0xf2, 0x05,
	0x44, 0x08, 0xed, 0x02, 0x9e, 0x80, 0x21, 0x04, 0x95, 0xa2, 0x69, 0xf2, 0x10, 0xf7, 0x26, 0x3e,
	0xcd, 0xa2, 0x2d, 0x71, 0x66, 0xbb, 0x88, 0x3d, 0x01, 0x2f, 0xc8, 0x15, 0x4f, 0x83, 0xfc, 0x27,
	0x95, 0xdb, 0xc2, 0x84, 0x76, 0xe7, 0xef, 0x3b, 0xae, 0xcf, 0xf9, 0x7e, 0x3d, 0x0a, 0x80, 0xe2,
	0x6b, 0x73, 0xd6, 0x2b, 0x69, 0x24, 0x49, 0xed, 0x99, 0xf6, 0x30, 0x2b, 0x65, 0xfd, 0xb1, 0x33,
	0xea, 0x9e, 0x2c, 0x61, 0xbc, 0xea, 0x04, 0xfe, 0xc8, 0x92, 0x3c, 0x29, 0x52, 0xe6, 0x05, 0x21,
	0x90, 0x7e, 0x41, 0xd5, 0x66, 0x4f, 0x9c, 0xe9, 0xce, 0x24, 0x87, 0xf9, 0x07, 0xd9, 0xb6, 0xbc,
	0x13, 0x17, 0xbc, 0xc5, 0x6c, 0x94, 0x27, 0xc5, 0x11, 0x8b, 0x2d, 0x92, 0xc1, 0x34, 0xc8, 0x2c,
	0xcd, 0x93, 0x62, 0xc1, 0x06, 0x49, 0x7f, 0x27, 0xb0, 0x7c, 0xdf, 0xf7, 0xd8, 0x09, 0xdb, 0xb5,
	0x41, 0xcd, 0xf0, 0x6e, 0x83, 0xda, 0x6c, 0x1b, 0x25, 0x51, 0xa3, 0xe7, 0x30, 0x2b, 0x91, 0x0b,
	0x54, 0x2b, 0xe1, 0x06, 0x38, 0x62, 0x5b, 0x4d, 0x28, 0x2c, 0x2e, 0x15, 0x7e, 0x2f, 0x65, 0xed,
	0xa7, 0x1e, 0xb9, 0xdf, 0xed, 0x78, 0x76, 0xd0, 0xa0, 0xdd, 0xd3, 0xa9, 0xbb, 0x12, 0x5b, 0xa4,
	0x80, 0x69, 0x98, 0x23, 0x1b, 0xe7, 0xa3, 0x62, 0xfe, 0xf6, 0xf8, 0xcc, 0x41, 0x1a, 0xa8, 0xb0,
	0xa1, 0x6c, 0xfb, 0xf9, 0xde, 0x36, 0x49, 0x63, 0xb2, 0x89, 0xef, 0x17, 0x7b, 0xf4, 0x67, 0x02,
	0xcf, 0xf6, 0xc2, 0xe9, 0x5e, 0x76, 0x1a, 0xff, 0x9a, 0x2e, 0x83, 0xe9, 0xd5, 0xa6, 0xaa, 0x50,
	0x6b, 0x17, 0x6e, 0xc6, 0x06, 0x69, 0x2b, 0x25, 0xd7, 0xa6, 0x94, 0x75, 0x88, 0x35, 0x48, 0xf2,
	0x12, 0x8e, 0x2f, 0x24, 0x43, 0xa3, 0xee, 0xcf, 0x79, 0x75, 0x23, 0xd7, 0x6b, 0x17, 0x6a, 0xc6,
	0xf6, 0x5c, 0xfa, 0x2b, 0x01, 0x12, 0xc8, 0x7e, 0x95, 0x06, 0x1f, 0x82, 0x6c, 0xff, 0x4d, 0xde,
	0x89, 0x46, 0x70, 0x83, 0x5b, 0xce, 0xb1, 0xe5, 0xa2, 0xfb, 0xfe, 0x3b, 0xa8, 0x63, 0xcf, 0xbe,
	0x12, 0x74, 0x8c, 0x3a, 0xb2, 0xec, 0x8d, 0xf3, 0x5b, 0x59, 0xdd, 0x7c, 0xc6, 0xa6, 0xbe, 0x36,
	0xd9, 0xd8, 0xdf, 0x88, 0xac, 0x61, 0xaf, 0x1a, 0xe3, 0xdb, 0x78, 0xc2, 0xb1, 0x45, 0x5b, 0x78,
	0xba, 0x93, 0xea, 0x01, 0xba, 0x39, 0xcc, 0xed, 0x9d, 0x4f, 0x8a, 0x77, 0x06, 0x45, 0x20, 0x1c,
	0x5b, 0xfb, 0x03, 0x8d, 0x0e, 0x06, 0xb2, 0x14, 0x4f, 0xae, 0x3a, 0xde, 0xeb, 0x6b, 0x29, 0xcd,
	0x63, 0x17, 0xf5, 0x0d, 0x9c, 0x5a, 0x0c, 0xab, 0xae, 0xba, 0xdd, 0x08, 0x14, 0x31, 0xc2, 0xc3,
	0x02, 0x79, 0x0d, 0x27, 0xb1, 0x19, 0xc1, 0x3c, 0xf0, 0xff, 0x83, 0xe8, 0x12, 0xc6, 0x97, 0x88,
	0x4a, 0x3b, 0x96, 0x0b, 0xe6, 0x05, 0x7d, 0x05, 0xa7, 0x51, 0xaa, 0x7f, 0x33, 0xa4, 0x2f, 0x60,
	0x52, 0xca, 0x9a, 0xe1, 0x9d, 0xad, 0x0a, 0x6e, 0xb8, 0xab, 0x2e, 0x98, 0x3b, 0x53, 0x1a, 0xaa,
	0x6e, 0x5f, 0x75, 0xd8, 0xe4, 0xc4, 0x6f, 0x72, 0x90, 0xdf, 0x26, 0xee, 0x6b, 0xf3, 0xee, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x92, 0x15, 0x12, 0x7b, 0x04, 0x00, 0x00,
}
