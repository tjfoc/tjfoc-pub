syntax = "proto3";

package raft;

//option go_package = "github.com/tjfoc/tjfoc/protocol";

message LogEntry {
	uint64 Index=1;
	uint64 Term=2;
	string CommandName=3;
	bytes Command=4; // for nop-command
}


//附加日志，参数
message AppendEntriesRequest {
    //领导人的任期号
    uint64  Term = 1;	
    //领导人的 Id，以便于跟随者重定向请求
    string LeaderId = 2;
    //新的日志条目紧随之前的索引值
    uint64  PrevLogIndex = 3;
    //prevLogIndex 条目的任期号	
    uint64 PrevLogTerm = 4;	
    //准备存储的日志条目（表示心跳时为空；一次性发送多个是为了提高效率）
    repeated LogEntry Entries = 5;
    //领导人已经提交的日志的索引值
    uint64 LeaderCommit = 6;	
}

//附加日志，返回结果
message AppendEntriesResponse {
    //当前的任期号，用于领导人去更新自己
    uint64 Term = 1;	
    //跟随者包含了匹配上 prevLogIndex 和 prevLogTerm 的日志时为真
    bool Success = 2;


    // uint64 Index=2;
    // uint64 CommitIndex=3;

    // Last Log is a hint to help accelerate rebuilding slow nodes
    uint64 LastLog = 3;
    
    // There are scenarios where this request didn't succeed
	// but there's no need to wait/back-off the next attempt.
	bool NoRetryBackoff =4 ;
}


//请求投票，参数
message RequestVoteRequest{
    //候选人的任期号
    uint64 Term = 1;
    //请求选票的候选人的 Id
    string CandidateId = 2;	
    //候选人的最后日志条目的索引值
    uint64 LastLogIndex = 3;	
    //候选人最后日志条目的任期号
    uint64 LastLogTerm = 4;	
    //区块高度
    uint64 BlockHeight = 5;

    uint64 CommitIndex = 6;
}

//请求投票，返回
message RequestVoteResponse{
    //当前任期号，以便于候选人去更新自己的任期号
    uint64 Term = 1;	
    //候选人赢得了此张选票时为真
    bool VoteGranted = 2;	
     //区块高度
    uint64 BlockHeight = 3;
}

//快照
message SnapshootRequest{
      //领导人的任期号
      uint64 Term = 1;	
      //领导人的 Id，以便于跟随者重定向请求
      string LeaderId = 2;
      //快照中包含的最后日志条目的索引值
      uint64 LastIncludedIndex = 3;
      //快照中包含的最后日志条目的任期号	
      uint64 LastIncludedTerm = 4; 	
      //区块高度
      uint64 BlockHeight = 5;
      //节点信息
      bytes Peers = 6;
}

//快照
message SnapshootResponse{
    //当前任期号，便于领导人更新自己
    uint64 Term = 1;	
}


message LogReq{
    bytes data =1;
}

message LogRes{
    bool success=1;
}
