syntax = "proto3";

package peer;

import "block.proto";
import "transaction.proto";

message BlockchainBool{
    bool ok = 1;
	string err = 2;
}

message BlockchainHash{
    bytes hashData = 1;
}

message PeerInfo{
    string id = 1;
    string addr = 2;
    int32 state = 3;
}

message PeerUpdateInfo{
    int32 typ = 1;
    string id = 2;
    string addr = 3;
    string data = 4;
    string sign = 5;
    string admin = 6;
}

message MemberListInfo{
    repeated PeerInfo memberList = 1;
}

message BlockchainNumber{
    uint64 number = 1;
}

message SearchMes{
	repeated bytes key = 1;
	uint32 type = 2;//0-单key完整查询 1-多key完整查询 2-前缀查询 3-范围查询（暂未实现）
}

message SearchRes{
	map<string,string> res = 1;
}

message PeerStatusInfo{
	map<string,double> diskUsedPercent = 1;//磁盘使用量
	map<string,uint64> diskTotal = 2;//磁盘总量
	double memUsedPercent = 3;//内存使用量
	uint64 memTotal = 4;//内存总量
	repeated double singleCPUUsedPercent = 5;//单个cpu使用量
	double totalCPUUsedPercent = 6;//总的cpu使用量
	double wsRateTotal = 7;//worldstate插入数据的总频率
	double wsRateFromLast = 8;//worldstate插入数据的频率，从上次到此次
	double wsRateEverySec10 = 9;//worldstate插入数据的频率，每10秒钟
}
message Empty{

}

service Peer{
    rpc Search(SearchMes) returns(SearchRes){};
    rpc NewTransaction(transaction.Transaction) returns(BlockchainBool){};

    rpc BlockchainGetHeight(BlockchainBool) returns(BlockchainNumber){};

    rpc BlockchainGetBlockByHash(BlockchainHash) returns(block.Block){};
    rpc BlockchainGetBlockByHeight(BlockchainNumber) returns(block.Block){};

    rpc BlockchainGetTransaction(BlockchainHash) returns(transaction.Transaction){};
    rpc BlockchainGetTransactionIndex(BlockchainHash) returns(BlockchainNumber){};
    rpc BlockchainGetTransactionBlock(BlockchainHash) returns(BlockchainNumber){};

    rpc GetMemberList(BlockchainBool) returns(MemberListInfo){};

    rpc UpdatePeer(PeerUpdateInfo) returns(BlockchainBool){};
	
	rpc GetPeerHealthData(Empty)returns(PeerStatusInfo){};
}
