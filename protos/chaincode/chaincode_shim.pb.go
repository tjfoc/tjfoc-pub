// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chaincode_shim.proto

/*
Package chaincode is a generated protocol buffer package.

It is generated from these files:
	chaincode_shim.proto

It has these top-level messages:
	ChaincodeMessage
	PutStateInfo
*/
package chaincode

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChaincodeMessage_Type int32

const (
	ChaincodeMessage_UNDEFINED           ChaincodeMessage_Type = 0
	ChaincodeMessage_REGISTER            ChaincodeMessage_Type = 1
	ChaincodeMessage_REGISTERED          ChaincodeMessage_Type = 2
	ChaincodeMessage_INIT                ChaincodeMessage_Type = 3
	ChaincodeMessage_READY               ChaincodeMessage_Type = 4
	ChaincodeMessage_TRANSACTION         ChaincodeMessage_Type = 5
	ChaincodeMessage_COMPLETED           ChaincodeMessage_Type = 6
	ChaincodeMessage_ERROR               ChaincodeMessage_Type = 7
	ChaincodeMessage_GET_STATE           ChaincodeMessage_Type = 8
	ChaincodeMessage_PUT_STATE           ChaincodeMessage_Type = 9
	ChaincodeMessage_DEL_STATE           ChaincodeMessage_Type = 10
	ChaincodeMessage_INVOKE_CHAINCODE    ChaincodeMessage_Type = 11
	ChaincodeMessage_RESPONSE            ChaincodeMessage_Type = 13
	ChaincodeMessage_GET_STATE_BY_RANGE  ChaincodeMessage_Type = 14
	ChaincodeMessage_GET_QUERY_RESULT    ChaincodeMessage_Type = 15
	ChaincodeMessage_QUERY_STATE_NEXT    ChaincodeMessage_Type = 16
	ChaincodeMessage_QUERY_STATE_CLOSE   ChaincodeMessage_Type = 17
	ChaincodeMessage_KEEPALIVE           ChaincodeMessage_Type = 18
	ChaincodeMessage_GET_HISTORY_FOR_KEY ChaincodeMessage_Type = 19
	ChaincodeMessage_GET_STATEN          ChaincodeMessage_Type = 20
	ChaincodeMessage_DEL_STATEN          ChaincodeMessage_Type = 21
	ChaincodeMessage_GET_STATE_BY_PREFIX ChaincodeMessage_Type = 22
	ChaincodeMessage_REQUIRE_CRYPT       ChaincodeMessage_Type = 23
	ChaincodeMessage_REQUIRE_COMPARE     ChaincodeMessage_Type = 24
)

var ChaincodeMessage_Type_name = map[int32]string{
	0:  "UNDEFINED",
	1:  "REGISTER",
	2:  "REGISTERED",
	3:  "INIT",
	4:  "READY",
	5:  "TRANSACTION",
	6:  "COMPLETED",
	7:  "ERROR",
	8:  "GET_STATE",
	9:  "PUT_STATE",
	10: "DEL_STATE",
	11: "INVOKE_CHAINCODE",
	13: "RESPONSE",
	14: "GET_STATE_BY_RANGE",
	15: "GET_QUERY_RESULT",
	16: "QUERY_STATE_NEXT",
	17: "QUERY_STATE_CLOSE",
	18: "KEEPALIVE",
	19: "GET_HISTORY_FOR_KEY",
	20: "GET_STATEN",
	21: "DEL_STATEN",
	22: "GET_STATE_BY_PREFIX",
	23: "REQUIRE_CRYPT",
	24: "REQUIRE_COMPARE",
}
var ChaincodeMessage_Type_value = map[string]int32{
	"UNDEFINED":           0,
	"REGISTER":            1,
	"REGISTERED":          2,
	"INIT":                3,
	"READY":               4,
	"TRANSACTION":         5,
	"COMPLETED":           6,
	"ERROR":               7,
	"GET_STATE":           8,
	"PUT_STATE":           9,
	"DEL_STATE":           10,
	"INVOKE_CHAINCODE":    11,
	"RESPONSE":            13,
	"GET_STATE_BY_RANGE":  14,
	"GET_QUERY_RESULT":    15,
	"QUERY_STATE_NEXT":    16,
	"QUERY_STATE_CLOSE":   17,
	"KEEPALIVE":           18,
	"GET_HISTORY_FOR_KEY": 19,
	"GET_STATEN":          20,
	"DEL_STATEN":          21,
	"GET_STATE_BY_PREFIX": 22,
	"REQUIRE_CRYPT":       23,
	"REQUIRE_COMPARE":     24,
}

func (x ChaincodeMessage_Type) String() string {
	return proto.EnumName(ChaincodeMessage_Type_name, int32(x))
}
func (ChaincodeMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ChaincodeMessage struct {
	Type           ChaincodeMessage_Type `protobuf:"varint,1,opt,name=type,enum=chaincode.ChaincodeMessage_Type" json:"type,omitempty"`
	Payload        []byte                `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Txid           string                `protobuf:"bytes,4,opt,name=txid" json:"txid,omitempty"`
	ChaincodeEvent *ChaincodeEvent       `protobuf:"bytes,6,opt,name=chaincode_event,json=chaincodeEvent" json:"chaincode_event,omitempty"`
}

func (m *ChaincodeMessage) Reset()                    { *m = ChaincodeMessage{} }
func (m *ChaincodeMessage) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeMessage) ProtoMessage()               {}
func (*ChaincodeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChaincodeMessage) GetType() ChaincodeMessage_Type {
	if m != nil {
		return m.Type
	}
	return ChaincodeMessage_UNDEFINED
}

func (m *ChaincodeMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ChaincodeMessage) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *ChaincodeMessage) GetChaincodeEvent() *ChaincodeEvent {
	if m != nil {
		return m.ChaincodeEvent
	}
	return nil
}

type PutStateInfo struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PutStateInfo) Reset()                    { *m = PutStateInfo{} }
func (m *PutStateInfo) String() string            { return proto.CompactTextString(m) }
func (*PutStateInfo) ProtoMessage()               {}
func (*PutStateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PutStateInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PutStateInfo) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*ChaincodeMessage)(nil), "chaincode.ChaincodeMessage")
	proto.RegisterType((*PutStateInfo)(nil), "chaincode.PutStateInfo")
	proto.RegisterEnum("chaincode.ChaincodeMessage_Type", ChaincodeMessage_Type_name, ChaincodeMessage_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChaincodeSupport service

type ChaincodeSupportClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (ChaincodeSupport_RegisterClient, error)
}

type chaincodeSupportClient struct {
	cc *grpc.ClientConn
}

func NewChaincodeSupportClient(cc *grpc.ClientConn) ChaincodeSupportClient {
	return &chaincodeSupportClient{cc}
}

func (c *chaincodeSupportClient) Register(ctx context.Context, opts ...grpc.CallOption) (ChaincodeSupport_RegisterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChaincodeSupport_serviceDesc.Streams[0], c.cc, "/chaincode.ChaincodeSupport/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &chaincodeSupportRegisterClient{stream}
	return x, nil
}

type ChaincodeSupport_RegisterClient interface {
	Send(*ChaincodeMessage) error
	Recv() (*ChaincodeMessage, error)
	grpc.ClientStream
}

type chaincodeSupportRegisterClient struct {
	grpc.ClientStream
}

func (x *chaincodeSupportRegisterClient) Send(m *ChaincodeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chaincodeSupportRegisterClient) Recv() (*ChaincodeMessage, error) {
	m := new(ChaincodeMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ChaincodeSupport service

type ChaincodeSupportServer interface {
	Register(ChaincodeSupport_RegisterServer) error
}

func RegisterChaincodeSupportServer(s *grpc.Server, srv ChaincodeSupportServer) {
	s.RegisterService(&_ChaincodeSupport_serviceDesc, srv)
}

func _ChaincodeSupport_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChaincodeSupportServer).Register(&chaincodeSupportRegisterServer{stream})
}

type ChaincodeSupport_RegisterServer interface {
	Send(*ChaincodeMessage) error
	Recv() (*ChaincodeMessage, error)
	grpc.ServerStream
}

type chaincodeSupportRegisterServer struct {
	grpc.ServerStream
}

func (x *chaincodeSupportRegisterServer) Send(m *ChaincodeMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chaincodeSupportRegisterServer) Recv() (*ChaincodeMessage, error) {
	m := new(ChaincodeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChaincodeSupport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chaincode.ChaincodeSupport",
	HandlerType: (*ChaincodeSupportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _ChaincodeSupport_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chaincode_shim.proto",
}

func init() { proto.RegisterFile("chaincode_shim.proto", fileDescriptor0) }

var fileDescriptor1 = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xc1, 0x4e, 0xdb, 0x40,
	0x10, 0x86, 0x31, 0x31, 0x90, 0x0c, 0x90, 0x0c, 0x43, 0x00, 0x97, 0x5e, 0xa2, 0x9c, 0x72, 0x42,
	0x15, 0xad, 0x7a, 0x37, 0xf6, 0x00, 0x5b, 0xc2, 0xda, 0xac, 0x37, 0x88, 0x5c, 0x6a, 0xb9, 0xb0,
	0x85, 0xa8, 0x14, 0x5b, 0xc4, 0x41, 0xcd, 0x1b, 0xf5, 0xc5, 0xfa, 0x1e, 0xd5, 0x26, 0x8d, 0xa1,
	0x55, 0xc5, 0x6d, 0xbe, 0x7f, 0xfe, 0x19, 0xff, 0xb6, 0xc6, 0xd0, 0xbe, 0xbe, 0xcb, 0x46, 0x0f,
	0xd7, 0xf9, 0x8d, 0x49, 0xc7, 0x77, 0xa3, 0xef, 0x07, 0xc5, 0x63, 0x5e, 0xe6, 0xd4, 0xa8, 0xd4,
	0xfd, 0x56, 0x55, 0xce, 0x7b, 0xdd, 0x5f, 0x2e, 0x60, 0xb0, 0xd0, 0xce, 0xcd, 0x78, 0x9c, 0xdd,
	0x1a, 0xfa, 0x00, 0x6e, 0x39, 0x2d, 0x8c, 0xe7, 0x74, 0x9c, 0x5e, 0xf3, 0xb0, 0x73, 0xf0, 0x3c,
	0xf4, 0xaf, 0xf5, 0x40, 0x4f, 0x0b, 0xa3, 0x66, 0x6e, 0xf2, 0x60, 0xad, 0xc8, 0xa6, 0xf7, 0x79,
	0x76, 0xe3, 0xd5, 0x3a, 0x4e, 0x6f, 0x43, 0x2d, 0x90, 0x08, 0xdc, 0xf2, 0xc7, 0xe8, 0xc6, 0x73,
	0x3b, 0x4e, 0xaf, 0xa1, 0x66, 0x35, 0x1d, 0xc1, 0x73, 0x96, 0xd4, 0x3c, 0x99, 0x87, 0xd2, 0x5b,
	0xed, 0x38, 0xbd, 0xf5, 0xc3, 0x37, 0xff, 0x7b, 0x1c, 0x5b, 0x83, 0x6a, 0x5e, 0xff, 0xc5, 0xdd,
	0x9f, 0x35, 0x70, 0x6d, 0x00, 0xda, 0x84, 0xc6, 0x40, 0x86, 0x7c, 0x2c, 0x24, 0x87, 0xb8, 0x44,
	0x1b, 0x50, 0x57, 0x7c, 0x22, 0x12, 0xcd, 0x0a, 0x1d, 0x6a, 0x02, 0x2c, 0x88, 0x43, 0x5c, 0xa6,
	0x3a, 0xb8, 0x42, 0x0a, 0x8d, 0x35, 0x6a, 0xc0, 0x8a, 0x62, 0x3f, 0x1c, 0xa2, 0x4b, 0x2d, 0x58,
	0xd7, 0xca, 0x97, 0x89, 0x1f, 0x68, 0x11, 0x49, 0x5c, 0xb1, 0x2b, 0x83, 0xe8, 0x3c, 0xee, 0xb3,
	0xe6, 0x10, 0x57, 0xad, 0x95, 0x95, 0x8a, 0x14, 0xae, 0xd9, 0xce, 0x09, 0xeb, 0x34, 0xd1, 0xbe,
	0x66, 0xac, 0x5b, 0x8c, 0x07, 0x0b, 0x6c, 0x58, 0x0c, 0xb9, 0xff, 0x07, 0x81, 0xda, 0x80, 0x42,
	0x5e, 0x46, 0x67, 0x9c, 0x06, 0xa7, 0xbe, 0x90, 0x41, 0x14, 0x32, 0xae, 0xcf, 0x03, 0x26, 0x71,
	0x24, 0x13, 0xc6, 0x4d, 0xda, 0x05, 0xaa, 0x16, 0xa6, 0x47, 0xc3, 0x54, 0xf9, 0xf2, 0x84, 0xb1,
	0x69, 0x67, 0xad, 0x7e, 0x31, 0x60, 0x35, 0x4c, 0x15, 0x27, 0x83, 0xbe, 0xc6, 0x96, 0x55, 0xe7,
	0xca, 0xdc, 0x2f, 0xf9, 0x4a, 0x23, 0xd2, 0x0e, 0x6c, 0xbd, 0x54, 0x83, 0x7e, 0x94, 0x30, 0x6e,
	0xd9, 0x34, 0x67, 0xcc, 0xb1, 0xdf, 0x17, 0x97, 0x8c, 0x44, 0x7b, 0xb0, 0x6d, 0x37, 0x9e, 0x8a,
	0x44, 0x47, 0x6a, 0x98, 0x1e, 0x47, 0x2a, 0x3d, 0xe3, 0x21, 0x6e, 0xdb, 0x6f, 0x54, 0x45, 0x90,
	0xd8, 0xb6, 0x5c, 0xbd, 0x85, 0xc4, 0x9d, 0xc5, 0x60, 0x15, 0x31, 0x56, 0x7c, 0x2c, 0xae, 0x70,
	0x97, 0xb6, 0x60, 0x53, 0xf1, 0xc5, 0x40, 0x28, 0x4e, 0x03, 0x35, 0x8c, 0x35, 0xee, 0xd1, 0x36,
	0xb4, 0x2a, 0x29, 0x3a, 0x8f, 0x7d, 0xc5, 0xe8, 0x75, 0x3f, 0xc2, 0x46, 0x3c, 0x29, 0x93, 0x32,
	0x2b, 0x8d, 0x78, 0xf8, 0x9a, 0x13, 0x42, 0xed, 0x9b, 0x99, 0xce, 0x2e, 0xac, 0xa1, 0x6c, 0x49,
	0x6d, 0x58, 0x79, 0xca, 0xee, 0x27, 0xc6, 0x5b, 0x9e, 0x1d, 0xcf, 0x1c, 0x0e, 0x3f, 0xbf, 0x38,
	0xcf, 0x64, 0x52, 0x14, 0xf9, 0x63, 0x49, 0x9f, 0xa0, 0xae, 0xcc, 0xed, 0x68, 0x5c, 0x9a, 0x47,
	0x7a, 0xfb, 0xca, 0x71, 0xee, 0xbf, 0xd6, 0xec, 0x2e, 0xf5, 0x9c, 0x77, 0xce, 0x97, 0xd5, 0xd9,
	0x6f, 0xf0, 0xfe, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x25, 0x83, 0x12, 0x3a, 0x03, 0x00,
	0x00,
}
